sec02-walking skeleton part1 - api
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- creating the project using create-projects-scripts from student assetes
- clean project from unnecessary code
- Creating a domain entity
- Adding an Entity Framework Db Context
    - add Microsoft.EntityFrameworkCore.Sqlite package from nuget gallery to Persistence project
- Creating an Entity Framework code first migration
    - display global dotnet packages by:
        dotnet tool list -g
    - install/update dotnet-ef nuget package by:
        dotnet tool install --global dotnet-ef --version 8.0.3
    - check instalation by running: dotnet ef 
    - add migrations by:
        dotnet ef migrations add InitialCreate -s API -p Persistence
    - add Microsoft.EntityFrameworkCore.Design packgage from nuget gallery to API project
- Creating the database
    - cd API => dotnet watch
- Seeding data to the database
    - cd API => dotnet watch --no-load-reload
- Adding an API Controller


sec03-walking skeleton part2 - Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Creating the react project (using vite)
    - https://vitejs.dev/guide/
- Fetching data From the API 
    - using axios and CORS Policy
- Semantic UI React
    - https://react.semantic-ui.com/


sec04-Creating a CRUD application using the CQRS + Mediator pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clean architecture
- CQRS
- Creating the first Query handler
    - add MediatR by Jimmy Bogard packgage from nuget gallery to Application project
- Thin controllers in the API
- Adding a Details handler
- Adding Create and Edit handlers
- Adding AutoMapper
    - add AutoMapper.Extensions.Microsoft.DependencyInjection by Jimmy Bogard packgage from nuget gallery to Application project
- Adding a Delete handler
- Startup class housekeeping
- Cancellellation tokens


sec05-Creating a CRUD app in React
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Folder stucture in React
- Adding an Activity interface 
    - json to ts: https://transform.tools/json-to-typescript
- Adding a Nav Bar
- Creating an activity dashboard
- Creating an activity list
- Creating a details view
- Creating an activity form
- add, edit and delete an activity


sec06-Axios
~~~~~~~~~~~
- Configure Axios
- Using generic types
- Using Axios interceptors
- Hooking up all our requests to the API
- Adding loading indicators
- Posting and Deleting data to the server


sec07-MobX
~~~~~~~~~~
- Introduce State management
    - MobX
    - MobX React Lite
    - React Context
- Setting up MobX
- MobX actions
- Refactoring the app to use MobX
- MobX strict mode
- Selecting an Activity using MobX
- Creating an Activity using MobX
- Deleting an Activity using MobX
- Using a js Map object to store the activities


sec08-Routing
~~~~~~~~~~~~~
- Intro
    - React-Router - https://reactrouter.com/en/main
    - React Router API
    - History
- Installing & Setting up React-Router
- adding routes & Outlet
- adding nav links
- Adding a details link
- Getting an individual activity
- Using route parameters
- Adding the edit activity route
- Adding a key to the route
- Redirect after submission
- Moving the home page outside of Nav


sec09-Styling the User Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Styling the activity list
- Grouping the activities by date
- Styling the list items
- Activity details page
- Populating the detailed components
- Adding the activity filter component
- Styling the home page


sec10-Error handling
~~~~~~~~~~~~~~~~~~~~
- goals:
    - Validation
    - handling HTTP Error Responses
    - handling Execptions
    - custom middleware
    - using axios interceptors
- Fluent Validation (backend)
    - add FluentValidation.AspNetCore by Jeremy Skinner package from nuget gallery to Application project
    - https://docs.fluentvalidation.net/en/latest/aspnet.html
    - validate create & edit Activity endpoint
- Handling API Error Responses
- Handling Execptions
- Prepering for setting up error handling in the client app
- Using an interceptor to handle API error responses
- Adding a not found component
- Handling 400 & 500 errors on the client
- Handling the validation error from an invliad GUID

sec11-Forms
~~~~~~~~~~~
- goals:
    - Forms with Formik - https://formik.org/
    - Validation with Formik/Yup
    - Creating reusable form inputs
- reusable TextInput, TextArea, SelectInput & DateInput

sec12-Identity
~~~~~~~~~~~~~~
- goals:
    - ASPNET Core Identity
    - JWT Token Authentication
    - Login/Register
    - Authenticated requests
- Adding a user entity
    - add Microsoft.AspNetCore.Identity.EntityFrameworkCore by Jeremy Skinner package from nuget gallery to Domain project
- Adding an IdentityDbContext
    - add IdentityAdded migration by: 
        dotnet ef migrations add IdentityAdded -s API -p Persistence
- Configuring Identity in the Startup class
- Adding seed users
- Creating the user DTOs
- Adding an account controller
- Creating a token service
    - add System.IdentityModel.Tokens.Jwt by Microsoft package from nuget gallery to API project
    - https://passwordgenerator.net/
    - https://jwt.ms/
- Authenticating to the app
    - add Microsoft.AspNetCore.Authentication.JwtBearer by Microsoft package from nuget gallery to API project
- Storing secrets in development
    - https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-8.0&tabs=windows
- Creating an auth Policy
- Registering new users
- Validating the Registeration of users
- Getting the current user


sec13-Client Side Login And Registeration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Axios interceptors
    - MobX reactions
    - Form submission errors
    - Modals
- Creating login form
- Creating the interfaces and methods
- Creating a user store
- Displaying errors in the form
- Setting the token upon login
- Updateting the home page and nav bar
- Persisting the login
- Sending the toekn with the request
- Adding Modals
- Adding the register form
- Handling validation errors in the register form


sec14-Entity Framework Relationships
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - EF Relationships
    - loading related entities
    - AutoMapper queryable Extensions
    - Adding an infrastructure project
- Configuring the new relationship (Activity, AppUser, ActivityAttendee)
    - add migrations by: dotnet ef migrations add ActivityAttendee -s API -p Persistence
- Adding an infrastructure project
    - create new class library: 
        - cd Reactivities/
        - dotnet new classlib -n Infrastructure
    - add infrastructure project to soultion: 
        - dotnet sln add Infrastructure
    - the infrastructure project is going to need a reference to our application project,
        and it's going to need to be able to access the classes inside our application project.
        - cd Reactivities/Infrastructure
        - dotnet add reference ../Application
    - the API project is going to need access to our infrastructure project.
        - cd Reactivities/API
        - dotnet add reference ../Infrastructure
    - go to file: /Reactivities/Infrastructure/Infrastructure.csproj and set Nullable in PropertyGroup to disable.
    - we're going to want to access the services of Infrastructure project frpm inside our application project, 
        but our application project does not have a Dependency on the infrastructure project.
        So in order to use the Infrastructure's services we're going to create inside our infrastructure project,
        we're going to need an interface in our application to do so.
        - mkdir Reactivities/Application/Interfaces
- Updateting the create activity handler
- Testing the create activity
- Loading related data
    - https://learn.microsoft.com/en-us/ef/core/querying/related-data/
    - https://learn.microsoft.com/en-us/ef/ef6/querying/related-data
    - Eagerly Loading / Lazy Loading  / Explicitly Loading
- Shaping the related data
- Configuring AutoMapper profiles
- Adding the attendance handler
    - dotnet ef migrations add AddCancelledProperty -p Persistence -s API 
- Adding a custom auth policy
- Updateting the seed data
    - drop database & restart


sec15-Feature-Client side attendance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals: implement the attendance feature in the client app
- Adding the attendances component
- Updateting the details component
- Conditionally rendering the buttons
- Adding the store methods to attend
- Updateting the create and edit methods
- Adding a cancel activity method
- Adding a popover for attendances
- Adding a popover for attendees

sec16-API image upload
~~~~~~~~~~~~~~~~~~~~~~
- goals: 
    - Photo Storage options
    - Adding a photho upload service
    - Using the Cloudinary API
- Adding Cloudinary
    - CloudinaryDotNet @Cloudinary
- Adding the Cloudinary interfaces
- Adding the add phto logic
- Adding the Photo entity
    - dotnet ef migrations add PhotoEntityAdded -p Persistence -s API
- Adding the Add photo handler
- Adding a photos controller
- Deleting photos
- Setting the main photo
- Returning user profiles
- Updateting the mapping configurtion
- Returning an attendee DTO


sec17-Client image upload
~~~~~~~~~~~~~~~~~~~~~~~~~
- goals: 
    - Adding a profile page
    - Displaying user photos
    - Adding a photo upload widget
    - React dropzone
    - React cropper
    - Setting main photo
    - Deleting photos
- Creating a profile page
- Adding a profile header
- Adding the profile content
- Getting the profile data
- Getting the profile data part 2
- Displaying the photos
- Conditionally rendering the photo widget
- Creating a photo upload widget
- Adding a Dropzone
- Styling the Dropzone
- Adding a react cropper
- Adding the photo upload method
- Setting the main photo
- Deleting photos 


sec18-Challenge-Edit profile feature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- API 
    - Edit handler to update the profile
    - Update the ProfilesController and add an endpoint for editing the profile
- Postman
    - Test the endpoint in Postman using the 3 requests in the Module 18 folder
- Client
    - Add a new request in the agent.ts
    - Add a helper method in the user store to set the display name
    - Add a method to update the profile in the profile store
    - Create a Profile Edit form component in the Profiles feature folder
    - Create a ProfileAbout component that will make use of the form
    - Update the ProfileContent component to display the profile
    - Update the Profile Card to show the user bio

    
sec19-SignalR
~~~~~~~~~~~~~~
- Introduction
    - what is SignalR
    - SignalR transports
    - SignalR client package
- Setting up the comment entity
    - dotnet ef migrations add CommentEntityAdded -p Persistence -s API
- Adding a comment DTO and mapping
- Adding the create handler
- Adding a list handler
- Adding a SignalR Hub
- Authenticating to SignalR
- Adding SignalR to the client
- Connecting to the hub
- Sending comments
- Adding validation and fix issues
- Resolving UTC dates


Sec20-Followers-Following_feature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Implement the following feature from end to end
    - Self referencing many to many relationship
- Adding a join entity
    - dotnet ef migrations add FollowingEntityAdded -p Persistence -s API
    - dotnet ef migrations script -o test.sql -p Persistence -s API
- Adding a handler for following
- Adding the controller
- Update the profile class
- Return a list of followers
- Adding the following property to the mapping configuration
- Updating the other handlers with the following property
- Adding the Ul for followers
- Adding methods to follow and unfollow
- Making the follow button a component
- Getting a list of followings
- Using MobX Reactions


Sec21-Paging-Sorting-Filtering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals
    - Paging on the API & Client
    - Sorting on the API & Client
    - Filtering on the API & Client
    - IQueryable< T>
- Adding a PagedList class
- Adding application layer pagination logic
- Adding a pagination header
- Adding client side pagination
- Adding pagination parameters
- Adding vertical paging
- Adding infinite scrolling
- Adding filtering in the API
- Client side filtering
- Updating the filter component
- Adding placeholders
- Adding a user profile activities component + challenge
- Challenge solution


Sec22-Finishing_touches_and_publishing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction
    - ScrollTo Top
    - Client side route protection
    - Build the react app for production
    - Switching to a "production" DB
    - Publishing to Heroku
    - Getting an "A" grade on securityheaders.com
- Adding Scroll to top for our routes
- Adding private routes
- Prepping the client app for production
    - https://vitejs.dev/guide/env-and-mode
- Building the production build of the react app
    - https://vitejs.dev/guide/build.html
    a. cd Reactivities/client-app
    b. npm run build
- Running the client app on the dotnet Kestrel server
    a. cd Reactivities/API
    b. dotnet run
- Adding PostGresQL
    - install docker
    - cd Reactivities
    - docker run --name reactivities_db_dev -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=secret -p 5432:5432 -d postgres:latest
- Switching to PostGresQL
    - https://learn.microsoft.com/en-us/ef/core/providers/?tabs=dotnet-core-cli
    - add Npgsql.EntityFrameworkCore.PostgreSQL package from nuget gallery to Persistence project
    - dotnet ef database drop -s API -p Persistence
    - dotnet ef migrations add SqliteInitial -p Persistence -s API
    - dotnet ef migrations add PostgresInitial -p Persistence -s API

- https://fly.io/
    - https://fly.io/docs/about/pricing/
    - https://fly.io/docs/languages-and-frameworks/
- Deployment to flyio - Dockerise the app
    - docker build -t mydockerid/reactivities .
    - docker run -rm -it -p 8080:80 mydockerid/reactivities
- Deployment to flyio - updating the config to use docker postgres
    - https://hub.docker.com/
    - docker push mydockerid/reactivities:latest
- Deployment to flyio - using fly launch to create deploy config
    - https://fly.io/docs/getting-started/launch-demo/
    - brew install flyctl
    - fly auth signup
    - fly auth login
    - fly launch --image mydockerid/reactivities:latest
        - app name: reactivities-danix
        - choose a region
        - setup Postgresql: yes
            - development
            - save given: username, password, hostname, proxy port, postgres port, connection string
        - redis db: no
        - deploy: no
- Deploy to flyio - creating the config variables and secrets & Resources
    - update fly.toml file in env section according to appsettings.json
    - in order to store secrets:
        - terminal: fly secrets list
        - strog password generator: 
            - https://delinea.com/
            - https://delinea.com/resources/password-generator-it-tool
        - fly secrets set TokenKey=MySecretTokenKey
        - fly secrets set Cloudinary__ApiKey=MySecretCloudinary__ApiKey
    - add expose 8080 in dockerfile
    - docker build -t mydockerid/reactivities .
    - docker push mydockerid/reactivities:latest
    - fly deploy
- Deployment to flyio - creating a github action
- Deployment to flyio - Automatic deployment with github actions
    - https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/
    - to get the logs from the production remote app
        - fly logs
        - fly app list
        - fly app -a reactivities_course
    - to get FLY_API_TOKEN from github
        - fly auth token
    - to connect the remote db:
        - fly app list
        - fly proxy 6543:5432 -a reactivities_db_dev    (6543 for local portm 5432 for the remote port)

- Heroku no longer providing a free service
- Setting up Heroku
    - create a new app in Heroku website - name: reactivities
    - in Reactivities project (terminal)
        - heroku login
        - heroku git:remote -a reactivities
    - in Heroku website:
        - go to Resources
            - add-ons: Heroku Postgres (free)
            - click on the db 
                - go to settings and see the details (host, db, port, password, uri, cli)
        - go to Settings
            - Reveal Config Vars
            - supply the config variables inside the settings here
                - key: value:
                    - DATABASE_URL          | postgres://...
                    - Cloudinary:ClloudName | value 
                    - Cloudinary:ApiKey     | value
                    - Cloudinary:ApiSecret  | value
                    - TokenKey              | generate strong random password
                    - ASPNETCORE_ENVIRONMENT | Production
            - click on Add buildpack
                - in google search for: "dotnet buildpack"
                    - https://github.com/jincod/dotnetcore-buildpack
                    - copy .NET Core edge: heroku buildpacks:set https://github.com/jincod/dotnetcore-buildpack
                    - paste in in the vscode terminal
- Deploying the app to Heroku
    - commit changes to github
    - git push heroku main
    - to see logs in heroku: go to the app in heroku and click more -> view logs

- Security tightening
    - https://securityheaders.com/
    - add a nuget package:
        - add NWebsec.AspNetCore.Middleware @André N. Klingsheim packgage from nuget gallery to API project
- Content security policies


Sec23-Identity-Cookbook
~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Facebook Login
    - Refresh Tokens
    - Email Confirmation

- Setting up Facebook login
    - npm i @greatsumini/react-facebook-login
    - https://developers.facebook.com/
- Adding the Facebook JS SDK
- Adding the client methods for FB Login
- Configuring the API endpoint
- Debugging the Facebook info
- Redeploying the app to Flyio
    - in reactivities: fly secrets set Facebook__ApiSecret=MyApiSecret
    - in clientApp: npm run build
    - in https://developers.facebook.com/ in fb login settings add localhost:5000 to the two white lists.
    - dotnet dev-certs https
        - dotnet dev-certs https --clean
        - dotnet dev-certs https --trust

- Introduction to Refresh Tokens
- Adding the Refresh token domain entity
    - dotnet ef migrations add RefreshTokens -p Persistence -s API
- Updating the JWT token parameters
- Updating the account controller
- Testing in Postman
- Client side configuration
- Testing the refresh token in the client
- Redeploying the app to Flyio

