sec02-walking skeleton part1 - api
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- creating the project using create-projects-scripts from student assetes
- clean project from unnecessary code
- Creating a domain entity
- Adding an Entity Framework Db Context
    - add Microsoft.EntityFrameworkCore.Sqlite package from nuget gallery to Persistence project
- Creating an Entity Framework code first migration
    - display global dotnet packages by:
        dotnet tool list -g
    - install/update dotnet-ef nuget package by:
        dotnet tool install --global dotnet-ef --version 8.0.3
    - check instalation by running: dotnet ef 
    - add migrations by:
        dotnet ef migrations add InitialCreate -s API -p Persistence
    - add Microsoft.EntityFrameworkCore.Design packgage from nuget gallery to API project
- Creating the database
    - cd API => dotnet watch
- Seeding data to the database
    - cd API => dotnet watch --no-load-reload
- Adding an API Controller


sec03-walking skeleton part2 - Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Creating the react project (using vite)
    - https://vitejs.dev/guide/
- Fetching data From the API 
    - using axios and CORS Policy
- Semantic UI React
    - https://react.semantic-ui.com/


sec04-Creating a CRUD application using the CQRS + Mediator pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clean architecture
- CQRS
- Creating the first Query handler
    - add MediatR by Jimmy Bogard packgage from nuget gallery to Application project
- Thin controllers in the API
- Adding a Details handler
- Adding Create and Edit handlers
- Adding AutoMapper
    - add AutoMapper.Extensions.Microsoft.DependencyInjection by Jimmy Bogard packgage from nuget gallery to Application project
- Adding a Delete handler
- Startup class housekeeping
- Cancellellation tokens


sec05-Creating a CRUD app in React
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Folder stucture in React
- Adding an Activity interface 
    - json to ts: https://transform.tools/json-to-typescript
- Adding a Nav Bar
- Creating an activity dashboard
- Creating an activity list
- Creating a details view
- Creating an activity form
- add, edit and delete an activity


sec06-Axios
~~~~~~~~~~~
- Configure Axios
- Using generic types
- Using Axios interceptors
- Hooking up all our requests to the API
- Adding loading indicators
- Posting and Deleting data to the server


sec07-MobX
~~~~~~~~~~
- Introduce State management
    - MobX
    - MobX React Lite
    - React Context
- Setting up MobX
- MobX actions
- Refactoring the app to use MobX
- MobX strict mode
- Selecting an Activity using MobX
- Creating an Activity using MobX
- Deleting an Activity using MobX
- Using a js Map object to store the activities


sec08-Routing
~~~~~~~~~~~~~
- Intro
    - React-Router - https://reactrouter.com/en/main
    - React Router API
    - History
- Installing & Setting up React-Router
- adding routes & Outlet
- adding nav links
- Adding a details link
- Getting an individual activity
- Using route parameters
- Adding the edit activity route
- Adding a key to the route
- Redirect after submission
- Moving the home page outside of Nav


sec09-Styling the User Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Styling the activity list
- Grouping the activities by date
- Styling the list items
- Activity details page
- Populating the detailed components
- Adding the activity filter component
- Styling the home page


sec10-Error handling
~~~~~~~~~~~~~~~~~~~~
- goals:
    - Validation
    - handling HTTP Error Responses
    - handling Execptions
    - custom middleware
    - using axios interceptors
- Fluent Validation (backend)
    - add FluentValidation.AspNetCore by Jeremy Skinner package from nuget gallery to Application project
    - https://docs.fluentvalidation.net/en/latest/aspnet.html
    - validate create & edit Activity endpoint
- Handling API Error Responses
- Handling Execptions
- Prepering for setting up error handling in the client app
- Using an interceptor to handle API error responses
- Adding a not found component
- Handling 400 & 500 errors on the client
- Handling the validation error from an invliad GUID

sec11-Forms
~~~~~~~~~~~
- goals:
    - Forms with Formik - https://formik.org/
    - Validation with Formik/Yup
    - Creating reusable form inputs
- reusable TextInput, TextArea, SelectInput & DateInput

sec12-Identity
~~~~~~~~~~~~~~
- goals:
    - ASPNET Core Identity
    - JWT Token Authentication
    - Login/Register
    - Authenticated requests
- Adding a user entity
    - add Microsoft.AspNetCore.Identity.EntityFrameworkCore by Jeremy Skinner package from nuget gallery to Domain project
- Adding an IdentityDbContext
    - add IdentityAdded migration by: 
        dotnet ef migrations add IdentityAdded -s API -p Persistence
- Configuring Identity in the Startup class
- Adding seed users
- Creating the user DTOs
- Adding an account controller
- Creating a token service
    - add System.IdentityModel.Tokens.Jwt by Microsoft package from nuget gallery to API project
    - https://passwordgenerator.net/
    - https://jwt.ms/
- Authenticating to the app
    - add Microsoft.AspNetCore.Authentication.JwtBearer by Microsoft package from nuget gallery to API project
- Storing secrets in development
    - https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-8.0&tabs=windows
- Creating an auth Policy
- Registering new users
- Validating the Registeration of users
- Getting the current user


sec13-Client Side Login And Registeration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Axios interceptors
    - MobX reactions
    - Form submission errors
    - Modals
- Creating login form
- Creating the interfaces and methods
- Creating a user store
- Displaying errors in the form
- Setting the token upon login
- Updateting the home page and nav bar
- Persisting the login
- Sending the toekn with the request
- Adding Modals
- Adding the register form
- Handling validation errors in the register form


sec14-Entity Framework Relationships
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - EF Relationships
    - loading related entities
    - AutoMapper queryable Extensions
    - Adding an infrastructure project
- Configuring the new relationship (Activity, AppUser, ActivityAttendee)
    - add migrations by: dotnet ef migrations add ActivityAttendee -s API -p Persistence
